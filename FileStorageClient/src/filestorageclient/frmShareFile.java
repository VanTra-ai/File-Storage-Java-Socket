/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package filestorageclient;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import java.awt.event.WindowAdapter; // Import cần thiết
import java.awt.event.WindowEvent;   // Import cần thiết
import java.util.logging.Level;
import java.util.List;
import filestorageclient.frmMainClient;
import java.util.logging.Logger;

public class frmShareFile extends javax.swing.JFrame {

    private final ClientSocketManager clientManager = ClientSocketManager.getInstance();

    private final frmMainClient parentForm;
    private final int fileId;
    private final String fileName;
    private final DefaultTableModel sharedUsersTableModel;
    private static final Logger logger = Logger.getLogger(frmShareFile.class.getName());

    public frmShareFile(frmMainClient parentForm, int fileId, String fileName) {
        this.parentForm = parentForm;
        this.fileId = fileId;
        this.fileName = fileName;

        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (parentForm != null) {
                    parentForm.setEnabled(true);
                    parentForm.loadFileList();
                }
            }
        });

        this.setTitle("Quản lý Chia sẻ File: " + fileName);
        jLabel1.setText("File: " + fileName);

        sharedUsersTableModel = new DefaultTableModel(
            new Object[][]{},
            new String[]{"User Name", "Permission Level", "Sharing day"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        sharedUsersTable.setModel(sharedUsersTableModel);

        loadSharedUsers();
        
        sharedUsersTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                updateShareFieldsFromTable();
            }
        });
    }

    public frmShareFile() {
        this(null, -1, "N/A");
        //initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTargetUsername = new javax.swing.JTextField();
        cmbPermission = new javax.swing.JComboBox<>();
        btnDoShare = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sharedUsersTable = new javax.swing.JTable();
        btnDoUnshare = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnDoUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("File name");

        txtTargetUsername.setText("User name");

        cmbPermission.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Download Only", "Edit/Delete" }));

        btnDoShare.setText("Share");
        btnDoShare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoShareActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        sharedUsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "User Name", "Permission Level", "Sharing day"
            }
        ));
        jScrollPane1.setViewportView(sharedUsersTable);

        btnDoUnshare.setText("Unshare");
        btnDoUnshare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoUnshareActionPerformed(evt);
            }
        });

        jLabel2.setText("User name");

        btnDoUpdate.setText("Update");
        btnDoUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(29, 29, 29)
                                .addComponent(txtTargetUsername))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(197, 197, 197)
                                .addComponent(cmbPermission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(btnDoShare)
                                .addGap(26, 26, 26)
                                .addComponent(btnDoUpdate)
                                .addGap(28, 28, 28)
                                .addComponent(btnDoUnshare)
                                .addGap(32, 32, 32)
                                .addComponent(btnClose))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTargetUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbPermission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDoShare)
                    .addComponent(btnClose)
                    .addComponent(btnDoUnshare)
                    .addComponent(btnDoUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Tải danh sách người dùng đã được chia sẻ file này từ Server
     */
    private void loadSharedUsers() {
        if (sharedUsersTableModel != null) {
            sharedUsersTableModel.setRowCount(0);
        }

        if (clientManager == null || !clientManager.isClientConnected()) {
            JOptionPane.showMessageDialog(this, "Lỗi kết nối Server.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        new SwingWorker<String, Void>() {
            @Override
            protected String doInBackground() {
                return clientManager.listShares(fileId);
            }

            @Override
            protected void done() {
                try {
                    String response = get();
                    if (response.startsWith("SHARELIST_START:")) {
                        String data = response.substring("SHARELIST_START:".length());
                        if (!data.isEmpty()) {
                            String[] userEntries = data.split(";");
                            for (String entry : userEntries) {
                                String[] parts = entry.split("\\|");
                                if (parts.length == 3) {
                                    String username = parts[0];
                                    String sharedDate = parts[2];
                                    try {
                                        int permLevel = Integer.parseInt(parts[1]);
                                        String permText = (permLevel == 2) ? "Edit/Delete" : "Download Only";
                                        sharedUsersTableModel.addRow(new Object[]{username, permText, sharedDate});
                                    } catch (NumberFormatException nfe) {
                                        logger.warning("Dữ liệu cấp độ quyền không hợp lệ: " + parts[1]);
                                    }
                                } else {
                                    logger.warning("Dữ liệu chia sẻ không đúng định dạng: " + entry);
                                }
                            }
                        }
                    } else if (response.equals("SHARELIST_EMPTY")) {
                        logger.info("Server báo cáo danh sách chia sẻ trống.");
                    } else {
                        JOptionPane.showMessageDialog(frmShareFile.this, "Lỗi khi tải danh sách chia sẻ: " + response, "Lỗi Server", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(frmShareFile.this, "Lỗi xử lý luồng: " + e.getMessage(), "Lỗi Hệ thống", JOptionPane.ERROR_MESSAGE);
                }
            }
        }.execute();
    }

    /**
     * Điền thông tin người dùng được chọn từ bảng vào các trường nhập để chuẩn
     * bị cho việc thay đổi quyền.
     */
    private void updateShareFieldsFromTable() {
        int selectedRow = sharedUsersTable.getSelectedRow();
        if (selectedRow >= 0) {
            String username = (String) sharedUsersTableModel.getValueAt(selectedRow, 0);
            String permText = (String) sharedUsersTableModel.getValueAt(selectedRow, 1);
            txtTargetUsername.setText(username);
            cmbPermission.setSelectedItem(permText);

            btnDoShare.setEnabled(false);
            btnDoUpdate.setEnabled(true);
            btnDoUnshare.setEnabled(true);
        } else {
            txtTargetUsername.setText("");
            cmbPermission.setSelectedIndex(0);

            btnDoShare.setEnabled(true);
            btnDoUpdate.setEnabled(false);
            btnDoUnshare.setEnabled(false);
        }
    }

    private void btnDoShareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoShareActionPerformed
        final String targetUsername = txtTargetUsername.getText().trim();
        if (targetUsername.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Tên người dùng muốn chia sẻ.", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        final String permissionString = (String) cmbPermission.getSelectedItem();
        final String permCode = (permissionString.equals("Edit/Delete")) ? "2" : "1";

        btnDoShare.setEnabled(false);

        new SwingWorker<String, Void>() {
            @Override
            protected String doInBackground() {
                return clientManager.shareFile(fileId, targetUsername, permCode);
            }

            @Override
            protected void done() {
                try {
                    String response = get();
                    switch (response) {
                        case "SHARE_SUCCESS":
                            JOptionPane.showMessageDialog(frmShareFile.this, "Chia sẻ thành công cho user: " + targetUsername, "Thành công", JOptionPane.INFORMATION_MESSAGE);
                            loadSharedUsers();
                            txtTargetUsername.setText("");
                            break;
                        default:
                            JOptionPane.showMessageDialog(frmShareFile.this, "Lỗi chia sẻ: " + response, "Lỗi", JOptionPane.ERROR_MESSAGE);
                            break;
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(frmShareFile.this, "Mất kết nối hoặc lỗi I/O: " + e.getMessage(), "Lỗi Mạng", JOptionPane.ERROR_MESSAGE);
                } finally {
                    btnDoShare.setEnabled(true);
                }
            }
        }.execute();
    }//GEN-LAST:event_btnDoShareActionPerformed
    /**
     * Xử lý hành động Hủy Chia sẻ (Unshare)
     */
    private void btnDoUnshareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoUnshareActionPerformed
        int selectedRow = sharedUsersTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một người dùng trong danh sách để hủy chia sẻ.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        final String targetUsername = (String) sharedUsersTableModel.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn hủy chia sẻ với '" + targetUsername + "'?", "Xác nhận", JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        btnDoUnshare.setEnabled(false);

        new SwingWorker<String, Void>() {
            @Override
            protected String doInBackground() {
                return clientManager.unshareFile(fileId, targetUsername);
            }

            @Override
            protected void done() {
                try {
                    String response = get();
                    if ("UNSHARE_SUCCESS".equals(response)) {
                        JOptionPane.showMessageDialog(frmShareFile.this, "Hủy chia sẻ thành công với user: " + targetUsername, "Thành công", JOptionPane.INFORMATION_MESSAGE);
                        loadSharedUsers();
                    } else {
                        JOptionPane.showMessageDialog(frmShareFile.this, "Lỗi hủy chia sẻ: " + response, "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(frmShareFile.this, "Mất kết nối hoặc lỗi I/O: " + e.getMessage(), "Lỗi Mạng", JOptionPane.ERROR_MESSAGE);
                } finally {
                    btnDoUnshare.setEnabled(true);
                }
            }
        }.execute();
    }//GEN-LAST:event_btnDoUnshareActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    /**
     * Xử lý hành động Cập nhật Quyền (Update) Hành động này vẫn sử dụng lệnh
     * SHARE, dựa vào logic Server để tự động xử lý việc cập nhật nếu chia sẻ đã
     * tồn tại.
     */
    private void btnDoUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoUpdateActionPerformed
        final String targetUsername = txtTargetUsername.getText().trim();
        if (targetUsername.isEmpty() || sharedUsersTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn người dùng trong danh sách để cập nhật quyền.", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        final String permissionString = (String) cmbPermission.getSelectedItem();
        final int permCode = (permissionString.equals("Edit/Delete")) ? 2 : 1;

        int confirm = JOptionPane.showConfirmDialog(this, "Cập nhật quyền của '" + targetUsername + "' thành '" + permissionString + "'?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        btnDoUpdate.setEnabled(false);

        new SwingWorker<String, Void>() {
            @Override
            protected String doInBackground() {
                return clientManager.changeSharePermission(fileId, targetUsername, permCode);
            }

            @Override
            protected void done() {
                try {
                    String response = get();
                    if ("UPDATE_SUCCESS".equals(response)) {
                        JOptionPane.showMessageDialog(frmShareFile.this, "Cập nhật quyền thành công cho user: " + targetUsername, "Thành công", JOptionPane.INFORMATION_MESSAGE);
                        loadSharedUsers();
                    } else {
                        JOptionPane.showMessageDialog(frmShareFile.this, "Lỗi cập nhật quyền: " + response, "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(frmShareFile.this, "Mất kết nối hoặc lỗi I/O: " + e.getMessage(), "Lỗi Mạng", JOptionPane.ERROR_MESSAGE);
                } finally {
                    btnDoUpdate.setEnabled(true);
                }
            }
        }.execute();
    }//GEN-LAST:event_btnDoUpdateActionPerformed

    /**
     * @param args the command line arguments
     */    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDoShare;
    private javax.swing.JButton btnDoUnshare;
    private javax.swing.JButton btnDoUpdate;
    private javax.swing.JComboBox<String> cmbPermission;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable sharedUsersTable;
    private javax.swing.JTextField txtTargetUsername;
    // End of variables declaration//GEN-END:variables
}
