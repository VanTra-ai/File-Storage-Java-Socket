/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package filestorageclient;

import java.io.File;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

public class frmMainClient extends javax.swing.JFrame {
    // --- LẤY INSTANCE SINGLETON ---

    private final ClientSocketManager clientManager = ClientSocketManager.getInstance();

    private String username; // Vẫn cần username để hiển thị lời chào
    private DefaultTableModel tableModel;
    private static final Logger logger = Logger.getLogger(frmMainClient.class.getName());

    // --- XÓA TẤT CẢ THAM SỐ CONSTRUCTOR ---
    public frmMainClient() {
        // --- LẤY USERNAME TRỰC TIẾP TỪ MANAGER ---
        this.username = clientManager.getCurrentUsername();

        initComponents();
        initializeTable();

        lblWelcome.setText("Xin chào, " + this.username + "!");
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWelcome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        btnLogout = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        btnDownload = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnShare = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý File - File Storage Client");

        lblWelcome.setText("Xin chào, [Username]!");

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "File name", "Size", "Date modified", "Status", "Sharer"
            }
        ));
        jScrollPane1.setViewportView(fileTable);

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDownload.setText("Download");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnShare.setText("Share");
        btnShare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShareActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblWelcome)
                .addGap(39, 39, 39)
                .addComponent(btnLogout)
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(btnUpload)
                .addGap(18, 18, 18)
                .addComponent(btnDownload)
                .addGap(18, 18, 18)
                .addComponent(btnShare)
                .addGap(45, 45, 45)
                .addComponent(btnDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWelcome)
                    .addComponent(btnLogout))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload)
                    .addComponent(btnDownload)
                    .addComponent(btnDelete)
                    .addComponent(btnShare))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Khởi tạo cấu trúc bảng và tải danh sách file ban đầu
     */
    private void initializeTable() {
        String[] columnNames = {"File ID", "File Name", "Size (bytes)", "Upload Date", "Status", "Sharer"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        fileTable.setModel(tableModel);

        fileTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        fileTable.getColumnModel().getColumn(0).setMinWidth(0);
        fileTable.getColumnModel().getColumn(0).setMaxWidth(0);

        fileTable.getColumnModel().getColumn(4).setPreferredWidth(60);
        fileTable.getColumnModel().getColumn(4).setMaxWidth(80);

        fileTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        fileTable.getColumnModel().getColumn(5).setMaxWidth(150);

        loadFileList();
    }

    // LOGIC XỬ LÝ CHỨC NĂNG
    /**
     * Tải danh sách file từ Server và cập nhật JTable
     */
    public void loadFileList() {
        tableModel.setRowCount(0);

        new SwingWorker<String, Void>() {
            @Override
            protected String doInBackground() throws Exception {
                return clientManager.listFiles();
            }

            @Override
            protected void done() {
                try {
                    String response = get();
                    if (response.startsWith("FILELIST_START:")) {
                        String data = response.substring("FILELIST_START:".length());
                        if (data.isEmpty()) {
                            return;
                        }

                        String[] files = data.split(";");
                        for (String fileInfo : files) {
                            if (fileInfo.trim().isEmpty()) {
                                continue;
                            }

                            String[] parts = fileInfo.split("\\|", -1);
                            if (parts.length == 6) {
                                long fileSize = Long.parseLong(parts[2]);
                                String formattedSize = formatSize(fileSize);
                                String sharerName = parts[5].isEmpty() ? "" : parts[5];

                                Object[] rowData = new Object[]{parts[0], parts[1], formattedSize, parts[3], parts[4], sharerName};
                                tableModel.addRow(rowData);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(frmMainClient.this, "Không thể tải danh sách file: " + response, "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception ex) {
                    logger.log(Level.SEVERE, "Lỗi khi tải danh sách file", ex);
                }
            }
        }.execute();
    }

    /**
     * Xử lý Đăng xuất
     */
    private void handleLogout() {
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn đăng xuất?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    clientManager.logout();
                    return null;
                }

                @Override
                protected void done() {
                    new frmLogin().setVisible(true);
                    frmMainClient.this.dispose();
                }
            }.execute();
        }
    }

    /**
     * Xử lý Tải file lên (Upload)
     */
    private void handleUpload() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            btnUpload.setEnabled(false);

            new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    return clientManager.uploadFile(selectedFile);
                }

                @Override
                protected void done() {
                    try {
                        String uploadResult = get();
                        if ("UPLOAD_SUCCESS".equals(uploadResult)) {
                            JOptionPane.showMessageDialog(frmMainClient.this, "Upload file '" + selectedFile.getName() + "' thành công!");
                            loadFileList();
                        } else {
                            JOptionPane.showMessageDialog(frmMainClient.this, "Upload thất bại: " + uploadResult, "Lỗi", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (Exception ex) {
                        logger.log(Level.SEVERE, "Lỗi khi Upload file", ex);
                    } finally {
                        btnUpload.setEnabled(true);
                    }
                }
            }.execute();
        }
    }

    /**
     * Xử lý Tải file về (Download)
     */
    private void handleDownload() {
        int selectedRow = fileTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một file để tải xuống.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int fileId = Integer.parseInt((String) tableModel.getValueAt(selectedRow, 0));
        String fileName = (String) tableModel.getValueAt(selectedRow, 1);

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(new File(fileName));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            btnDownload.setEnabled(false);

            new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    return clientManager.downloadFile(fileId, fileToSave);
                }

                @Override
                protected void done() {
                    try {
                        String downloadResult = get();
                        if ("DOWNLOAD_SUCCESS".equals(downloadResult)) {
                            JOptionPane.showMessageDialog(frmMainClient.this, "Tải file thành công! Đã lưu tại: " + fileToSave.getAbsolutePath());
                        } else {
                            JOptionPane.showMessageDialog(frmMainClient.this, "Tải file thất bại: " + downloadResult, "Lỗi", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (Exception ex) {
                        logger.log(Level.SEVERE, "Lỗi khi Download file", ex);
                    } finally {
                        btnDownload.setEnabled(true);
                    }
                }
            }.execute();
        }
    }

    /**
     * Xử lý Xóa file (Delete)
     */
    private void handleDelete() {
        int selectedRow = fileTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một file để xóa.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int fileId = Integer.parseInt((String) tableModel.getValueAt(selectedRow, 0));
        String fileName = (String) tableModel.getValueAt(selectedRow, 1);
        String status = (String) tableModel.getValueAt(selectedRow, 4);

        if (status.equals("Shared")) {
            JOptionPane.showMessageDialog(this, "Bạn không thể xóa file được chia sẻ cho bạn.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa file '" + fileName + "'?", "Xác nhận Xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            btnDelete.setEnabled(false);
            new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    return clientManager.deleteFile(fileId);
                }

                @Override
                protected void done() {
                    try {
                        String deleteResult = get();
                        if ("DELETE_SUCCESS".equals(deleteResult)) {
                            JOptionPane.showMessageDialog(frmMainClient.this, "Đã xóa file '" + fileName + "' thành công!");
                            loadFileList();
                        } else {
                            JOptionPane.showMessageDialog(frmMainClient.this, "Xóa file thất bại: " + deleteResult, "Lỗi", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (Exception ex) {
                        logger.log(Level.SEVERE, "Lỗi khi Xóa file", ex);
                    } finally {
                        btnDelete.setEnabled(true);
                    }
                }
            }.execute();
        }
    }

    /**
     * Xử lý Chia sẻ file (Share)
     */
    private void handleShare() {
        int selectedRow = fileTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một file để chia sẻ.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int fileId = Integer.parseInt((String) tableModel.getValueAt(selectedRow, 0));
        String fileName = (String) tableModel.getValueAt(selectedRow, 1);
        String status = (String) tableModel.getValueAt(selectedRow, 4);

        if (status.equals("Shared")) {
            JOptionPane.showMessageDialog(this, "Bạn chỉ có thể quản lý việc chia sẻ cho file bạn sở hữu ('Owned').", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        this.setEnabled(false);

        // THAY ĐỔI 3: KHÔNG CẦN TRUYỀN clientManager QUA CONSTRUCTOR NỮA
        frmShareFile shareForm = new frmShareFile(this, fileId, fileName);
        shareForm.setVisible(true);
    }

    /**
     * Chuyển đổi kích thước byte sang định dạng MB, KB, GB
     */
    private String formatSize(long bytes) {
        if (bytes < 1024) {
            return bytes + " Bytes";
        }
        int unit = 1024;
        int exp = (int) (Math.log(bytes) / Math.log(unit));
        String pre = "KMGTPE".charAt(exp - 1) + "B";
        return String.format("%.2f %s", bytes / Math.pow(unit, exp), pre);
    }

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        handleLogout();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        handleUpload();
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        handleDownload();
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        handleDelete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnShareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShareActionPerformed
        handleShare();
    }//GEN-LAST:event_btnShareActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnShare;
    private javax.swing.JButton btnUpload;
    private javax.swing.JTable fileTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblWelcome;
    // End of variables declaration//GEN-END:variables
}
