/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package filestorageclient;

import java.io.File;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;

public class frmMainClient extends javax.swing.JFrame {

    // Khai báo các biến Logic và UI (Đảm bảo tên khớp với Design View)
    private final ClientSocketManager clientManager;
    private final String username;

    private DefaultTableModel tableModel;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(frmMainClient.class.getName());

    /**
     * Creates new form frmMainClient
     */
    public frmMainClient(String username, ClientSocketManager manager) {
        this.username = username;
        this.clientManager = manager;

        initComponents();
        initializeTable(); // Khởi tạo JTable

        lblWelcome.setText("Xin chào, " + username + "!"); // Cập nhật lời chào
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Đóng ứng dụng khi đóng cửa sổ chính
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWelcome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        btnLogout = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        btnDownload = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý File - File Storage Client");

        lblWelcome.setText("Xin chào, [Username]!");

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tên File", "Kích thước", "Ngày Upload"
            }
        ));
        jScrollPane1.setViewportView(fileTable);

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDownload.setText("Download");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblWelcome)
                .addGap(39, 39, 39)
                .addComponent(btnLogout)
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(btnUpload)
                .addGap(18, 18, 18)
                .addComponent(btnDownload)
                .addGap(138, 138, 138)
                .addComponent(btnDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWelcome)
                    .addComponent(btnLogout))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload)
                    .addComponent(btnDownload)
                    .addComponent(btnDelete))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Khởi tạo cấu trúc bảng và tải danh sách file ban đầu
     */
    private void initializeTable() {
        // 1. Định nghĩa cấu trúc cột (Thêm "File ID")
        String[] columnNames = {"File ID", "File Name", "Size (bytes)", "Upload Date"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            // Ngăn người dùng chỉnh sửa trực tiếp trên bảng
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        fileTable.setModel(tableModel);

        // 2. Ẩn cột "File ID" (Cột 0)
        // Đặt chiều rộng tối đa, tối thiểu và ưu tiên bằng 0
        fileTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        fileTable.getColumnModel().getColumn(0).setMinWidth(0);
        fileTable.getColumnModel().getColumn(0).setMaxWidth(0);

        // 3. Tải dữ liệu ban đầu
        loadFileList();
    }

    // LOGIC XỬ LÝ CHỨC NĂNG
    /**
     * Tải danh sách file từ Server và cập nhật JTable
     */
    private void loadFileList() {
        tableModel.setRowCount(0); // Xóa dữ liệu cũ

        String response = clientManager.listFiles();

        // SỬA ĐỔI: Kiểm tra tiền tố LIST_SUCCESS:
        if (response.startsWith("LIST_SUCCESS:")) {
            String data = response.substring("LIST_SUCCESS:".length());

            if (data.isEmpty()) {
                // Không có file nào
                return;
            }

            // Tách danh sách file bằng dấu chấm phẩy (;)
            String[] files = data.split(";");

            for (String fileInfo : files) {
                // Tách thông tin file bằng dấu gạch đứng (|)
                // Định dạng: ID|TênFile|KíchThước|NgàyUpload
                String[] parts = fileInfo.split("\\|");

                // Server gửi 4 phần (ID, Tên, Kích thước, Ngày)
                if (parts.length == 4) {
                    // Thêm 4 phần vào hàng theo đúng thứ tự cột
                    Object[] rowData = new Object[]{
                        parts[0], // File ID (Cột 0 - ẩn)
                        parts[1], // File Name (Cột 1)
                        parts[2], // Size (Cột 2)
                        parts[3] // Upload Date (Cột 3)
                    };
                    tableModel.addRow(rowData);
                } else {
                    logger.warning("Dữ liệu file không hợp lệ: " + fileInfo);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Không thể tải danh sách file: " + response, "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Xử lý Đăng xuất
     */
    private void handleLogout() {
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn đăng xuất?", "Xác nhận", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // SỬA LỖI: Dòng này hợp lệ khi clientManager đã được khởi tạo
            clientManager.logout();

            // Quay lại form Login
            // SỬA LỖI: Dòng này hợp lệ khi frmLogin có Constructor mặc định (frmLogin())
            frmLogin loginForm = new frmLogin();
            loginForm.setVisible(true);
            dispose(); // Đóng form Main hiện tại
        }
    }

    /**
     * Xử lý Tải file lên (Upload)
     */
    private void handleUpload() {
        JFileChooser fileChooser = new JFileChooser();
        // Giới hạn chỉ chọn file, không chọn thư mục
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            btnUpload.setEnabled(false);

            String uploadResult = clientManager.uploadFile(selectedFile);

            btnUpload.setEnabled(true);

            if ("UPLOAD_SUCCESS".equals(uploadResult)) {
                JOptionPane.showMessageDialog(this, "Upload file '" + selectedFile.getName() + "' thành công!");
                loadFileList(); // Cập nhật bảng
            } else {
                JOptionPane.showMessageDialog(this, "Upload thất bại: " + uploadResult, "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Xử lý Tải file về (Download)
     */
    private void handleDownload() {
        int selectedRow = fileTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một file để tải xuống.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Lấy ID file từ cột 0 (cột ẩn)
        int fileId = Integer.parseInt((String) tableModel.getValueAt(selectedRow, 0));
        String fileName = (String) tableModel.getValueAt(selectedRow, 1); // Lấy tên file từ cột 1 (để đặt tên mặc định)

        JFileChooser fileChooser = new JFileChooser();
        // Đặt tên mặc định cho file tải về
        fileChooser.setSelectedFile(new File(fileName));
        fileChooser.setDialogTitle("Chọn nơi lưu file: " + fileName);

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            btnDownload.setEnabled(false);

            String downloadResult = clientManager.downloadFile(fileId, fileToSave);

            btnDownload.setEnabled(true);

            if ("DOWNLOAD_SUCCESS".equals(downloadResult)) {
                JOptionPane.showMessageDialog(this, "Tải file thành công! Đã lưu tại: " + fileToSave.getAbsolutePath());
            } else {
                JOptionPane.showMessageDialog(this, "Tải file thất bại: " + downloadResult, "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Xử lý Xóa file (Delete)
     */
    private void handleDelete() {
        int selectedRow = fileTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một file để xóa.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int fileId = Integer.parseInt((String) tableModel.getValueAt(selectedRow, 0));
        String fileName = (String) tableModel.getValueAt(selectedRow, 1);

        int confirm = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc chắn muốn xóa file '" + fileName + "'?",
                "Xác nhận Xóa", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            btnDelete.setEnabled(false);

            String deleteResult = clientManager.deleteFile(fileId);

            btnDelete.setEnabled(true);

            if ("DELETE_SUCCESS".equals(deleteResult)) {
                JOptionPane.showMessageDialog(this, "Đã xóa file '" + fileName + "' thành công!");
                loadFileList(); // Cập nhật bảng
            } else {
                JOptionPane.showMessageDialog(this, "Xóa file thất bại: " + deleteResult, "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        handleLogout();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        handleUpload();
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        handleDownload();
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        handleDelete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnUpload;
    private javax.swing.JTable fileTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblWelcome;
    // End of variables declaration//GEN-END:variables
}
