/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package filestorageclient;

import java.io.*;
import java.net.Socket;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;

public class ClientSocketManager {

    // H·∫±ng s·ªë k·∫øt n·ªëi
    private static final String SERVER_IP = "127.0.0.1";
    private static final int SERVER_PORT = 12345;

    private Socket socket;
    private DataInputStream dis;
    private DataOutputStream dos;

    private int currentUserId = -1; // ID ng∆∞·ªùi d√πng hi·ªán t·∫°i ƒëang ƒëƒÉng nh·∫≠p
    private boolean isConnected = false;

    // --- QU·∫¢N L√ù K·∫æT N·ªêI ---
    /**
     * Thi·∫øt l·∫≠p k·∫øt n·ªëi ƒë·∫øn Server v√† kh·ªüi t·∫°o Streams.
     *
     * @return true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng.
     */
    public boolean connect() {
        if (isConnected) {
            return true;
        }
        String absoluteTrustStorePath = "C:\\Users\\Admin\\OneDrive\\Documents\\NetBeansProjects\\File-Storage-Java-Socket\\Drivers\\SSL\\client.jks";
        try {
            // ƒê·∫∑t ƒë∆∞·ªùng d·∫´n TrustStore (Drivers/SSL/client.jks)
            System.setProperty("javax.net.ssl.trustStore", absoluteTrustStorePath);
            // ƒê·∫∑t m·∫≠t kh·∫©u TrustStore
            System.setProperty("javax.net.ssl.trustStorePassword", "123456"); // S·ª¨ D·ª§NG M·∫¨T KH·∫®U ƒê√É ƒê·∫∂T

            // T·∫†O SSLSocket
            SocketFactory sf = SSLSocketFactory.getDefault();
            socket = sf.createSocket(SERVER_IP, SERVER_PORT);
            dos = new DataOutputStream(socket.getOutputStream());
            dis = new DataInputStream(socket.getInputStream());
            isConnected = true;
            System.out.println("ƒê√£ k·∫øt n·ªëi SECURE th√†nh c√¥ng ƒë·∫øn Server.");
            return true;
        } catch (IOException e) {
            System.err.println("L·ªói k·∫øt n·ªëi SSL ƒë·∫øn Server: " + e.getMessage());
            isConnected = false;
            return false;
        }
    }

    /**
     * ƒê√≥ng k·∫øt n·ªëi v√† Streams.
     */
    public void disconnect() {
        try {
            if (socket != null && !socket.isClosed()) {
                socket.close();
            }
            if (dos != null) {
                dos.close();
            }
            if (dis != null) {
                dis.close();
            }
            isConnected = false;
            currentUserId = -1;
            System.out.println("ƒê√£ ng·∫Øt k·∫øt n·ªëi.");
        } catch (IOException e) {
            System.err.println("L·ªói ƒë√≥ng k·∫øt n·ªëi: " + e.getMessage());
        }
    }

    // --- X·ª¨ L√ù AUTHENTICATION ---
    public String register(String username, String password, String email) {
        if (!isConnected && !connect()) {
            return "ERROR_CONNECTION";
        }
        try {
            dos.writeUTF("CMD_REGISTER");
            dos.writeUTF(username);
            dos.writeUTF(password);
            dos.writeUTF(email);
            dos.flush();
            return dis.readUTF(); // Nh·∫≠n ph·∫£n h·ªìi
        } catch (IOException e) {
            System.err.println("L·ªói I/O khi ƒëƒÉng k√Ω: " + e.getMessage());
            return "ERROR_IO";
        }
    }

    public String login(String username, String password) {
        if (!isConnected && !connect()) {
            return "ERROR_CONNECTION";
        }
        try {
            dos.writeUTF("CMD_LOGIN");
            dos.writeUTF(username);
            dos.writeUTF(password);
            dos.flush();

            String response = dis.readUTF();

            if ("LOGIN_SUCCESS".equals(response)) {
                this.currentUserId = dis.readInt(); // Nh·∫≠n ID
                String serverUsername = dis.readUTF(); // NH·∫¨N USERNAME T·ª™ SERVER
                System.out.println("ƒêƒÉng nh·∫≠p th√†nh c√¥ng. User ID: " + currentUserId + ", Username: " + serverUsername);

                // Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng m√† frmLogin ƒë√£ s·ª≠a ƒë·ªÉ mong ƒë·ª£i
                return "LOGIN_SUCCESS:" + serverUsername;
            }
            return response;
        } catch (IOException e) {
            System.err.println("L·ªói I/O khi ƒëƒÉng nh·∫≠p: " + e.getMessage());
            return "ERROR_IO";
        }
    }

    // --- X·ª¨ L√ù FILE ---
    public String uploadFile(java.io.File fileToUpload) {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }
        if (!fileToUpload.exists() || !fileToUpload.isFile()) {
            return "ERROR_FILE_NOT_FOUND";
        }

        try (FileInputStream fis = new FileInputStream(fileToUpload)) {
            // 1. G·ª≠i l·ªánh v√† Metadata
            dos.writeUTF("CMD_UPLOAD");
            dos.writeUTF(fileToUpload.getName());
            dos.writeLong(fileToUpload.length());
            dos.writeUTF(getFileType(fileToUpload.getName()));
            dos.flush();

            // 2. G·ª≠i D·ªØ li·ªáu File V·∫≠t l√Ω
            byte[] buffer = new byte[8192];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) > 0) {
                dos.write(buffer, 0, bytesRead);
            }
            dos.flush(); // ƒê·∫£m b·∫£o t·∫•t c·∫£ byte ƒë√£ ƒë∆∞·ª£c g·ª≠i

            // 3. Nh·∫≠n ph·∫£n h·ªìi cu·ªëi c√πng
            String response = dis.readUTF();
            if ("UPLOAD_SUCCESS".equals(response)) {
                dis.readInt();
                return "UPLOAD_SUCCESS";
            }
            return response;

        } catch (IOException e) {
            System.err.println("L·ªói I/O khi upload file: " + e.getMessage());
            return "ERROR_IO_UPLOAD";
        }
    }

    public String downloadFile(int fileId, java.io.File fileToSave) {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }

        try {
            // 1. G·ª≠i l·ªánh v√† T√™n file
            dos.writeUTF("CMD_DOWNLOAD");
            dos.writeInt(fileId); // G·ª≠i ID file (int)
            dos.flush();

            // 2. ƒê·ªçc ph·∫£n h·ªìi kh·ªüi ƒë·∫ßu
            String startResponse = dis.readUTF();
            if (!"DOWNLOAD_START".equals(startResponse)) {
                return startResponse;
            }

            // 3. Nh·∫≠n Metadata
            String receivedFileName = dis.readUTF();
            long fileSize = dis.readLong();

            // 4. M·ªü FileOutputStream ƒë·ªÉ ghi file t·∫°i ƒë∆∞·ªùng d·∫´n ƒë√£ ch·ªçn
            try (FileOutputStream fos = new FileOutputStream(fileToSave)) {
                // 5. Nh·∫≠n D·ªØ li·ªáu File V·∫≠t l√Ω
                byte[] buffer = new byte[8192];
                int bytesRead;
                long totalBytesRead = 0;

                while (totalBytesRead < fileSize && (bytesRead = dis.read(buffer, 0, (int) Math.min(buffer.length, fileSize - totalBytesRead))) > 0) {
                    fos.write(buffer, 0, bytesRead);
                    totalBytesRead += bytesRead;
                }

                if (totalBytesRead == fileSize) {
                    return "DOWNLOAD_SUCCESS";
                } else {
                    return "DOWNLOAD_FAIL_INCOMPLETE";
                }
            }

        } catch (IOException e) {
            System.err.println("L·ªói I/O khi download file: " + e.getMessage());
            return "ERROR_IO_DOWNLOAD";
        }
    }

    public void logout() {
        if (isConnected) {
            try {
                dos.writeUTF("CMD_LOGOUT");
                dos.flush();
            } catch (IOException e) {
                System.err.println("L·ªói g·ª≠i l·ªánh Logout: " + e.getMessage());
            } finally {
                disconnect(); // ƒê√≥ng k·∫øt n·ªëi
            }
        }
    }

    /**
     * Y√™u c·∫ßu Server g·ª≠i danh s√°ch file c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i.
     *
     * @return Chu·ªói ch·ª©a d·ªØ li·ªáu danh s√°ch file ƒë√£ ƒë·ªãnh d·∫°ng l·∫°i
     * (ID|T√™n|Size|Date|Status;...) ho·∫∑c th√¥ng b√°o l·ªói.
     *
     * üî• ƒê√É S·ª¨A: ƒê·ªìng b·ªô v·ªõi giao th·ª©c tr·∫£ v·ªÅ chu·ªói c·ªßa Server.
     */
    public String listFiles() {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }
        try {
            dos.writeUTF("CMD_LISTFILES");
            dos.flush();

            // Server s·∫Ω g·ª≠i m·ªôt chu·ªói duy nh·∫•t:
            // - Th√†nh c√¥ng: "FILELIST_START:ID|Name|Size|Date|Status;..."
            // - Th·∫•t b·∫°i: "FILELIST_FAIL_SERVER_ERROR"
            String response = dis.readUTF();

            if (response.startsWith("FILELIST_START:")) {
                // Tr·∫£ v·ªÅ chu·ªói d·ªØ li·ªáu (c√≥ th·ªÉ d√πng subString ƒë·ªÉ lo·∫°i b·ªè ti·ªÅn t·ªë n·∫øu c·∫ßn ·ªü l·ªõp ngo√†i)
                return response;
            } else {
                return response; // Tr·∫£ v·ªÅ m√£ l·ªói
            }

        } catch (IOException e) {
            System.err.println("L·ªói I/O khi y√™u c·∫ßu danh s√°ch file: " + e.getMessage());
            return "ERROR_IO_LIST";
        }
    }

    public String deleteFile(int fileId) {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }
        try {
            dos.writeUTF("CMD_DELETE");
            dos.writeInt(fileId);
            dos.flush();
            return dis.readUTF(); // Ch·ªù ph·∫£n h·ªìi: DELETE_SUCCESS ho·∫∑c DELETE_FAIL
        } catch (IOException e) {
            System.err.println("L·ªói I/O khi x√≥a file: " + e.getMessage());
            return "ERROR_IO_DELETE";
        }
    }

    // --- PH∆Ø∆†NG TH·ª®C TI·ªÜN √çCH ---
    private String getFileType(String fileName) {
        int dotIndex = fileName.lastIndexOf('.');
        if (dotIndex == -1 || dotIndex == fileName.length() - 1) {
            return "application/octet-stream"; // Lo·∫°i kh√¥ng x√°c ƒë·ªãnh
        }
        String extension = fileName.substring(dotIndex + 1).toLowerCase();
        switch (extension) {
            case "png":
                return "image/png";
            case "jpg":
            case "jpeg":
                return "image/jpeg";
            case "pdf":
                return "application/pdf";
            case "txt":
                return "text/plain";
            default:
                return "application/octet-stream";
        }
    }

    /**
     * G·ª≠i y√™u c·∫ßu chia s·∫ª file üî• ƒê√É S·ª¨A: Lo·∫°i b·ªè throws IOException, s·ª≠ d·ª•ng
     * sendCommand m·ªõi
     */
    public String shareFile(int fileId, String targetUsername, String permission) {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }
        // L·ªánh SHARE: [ID file]| [T√™n ng∆∞·ªùi nh·∫≠n]| [Quy·ªÅn h·∫°n (Download Only)]
        String command = "SHARE:" + fileId + "|" + targetUsername + "|" + permission;
        return sendCommand(command);
    }

    /**
     * G·ª≠i y√™u c·∫ßu l·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c chia s·∫ª file üî• ƒê√É S·ª¨A: Lo·∫°i b·ªè
     * throws IOException, s·ª≠ d·ª•ng sendCommand m·ªõi
     */
    public String listShares(int fileId) {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }
        // L·ªánh SHARE_LIST: [ID file]
        String command = "SHARE_LIST:" + fileId;
        return sendCommand(command);
    }

    /**
     * G·ª≠i y√™u c·∫ßu h·ªßy chia s·∫ª
     *
     * @param fileId ID file s·ªü h·ªØu
     * @param targetUsername Username ng∆∞·ªùi nh·∫≠n ƒë√£ ƒë∆∞·ª£c chia s·∫ª
     * @return Chu·ªói ph·∫£n h·ªìi t·ª´ Server üî• ƒê√É S·ª¨A: ƒê·ªìng b·ªô v·ªõi ƒë·ªãnh d·∫°ng Server
     * y√™u c·∫ßu: FileID|TargetUsername
     */
    public String unshareFile(int fileId, String targetUsername) {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }
        // L·ªánh UNSHARE: [FileID]| [TargetUsername]
        String command = "UNSHARE:" + fileId + "|" + targetUsername;
        return sendCommand(command);
    }

    /**
     * G·ª≠i m·ªôt l·ªánh d·∫°ng chu·ªói ƒë·∫øn Server v√† ch·ªù ph·∫£n h·ªìi.
     *
     * @param command Chu·ªói l·ªánh c·∫ßn g·ª≠i
     * @return Chu·ªói ph·∫£n h·ªìi t·ª´ Server ho·∫∑c m√£ l·ªói c·ª•c b·ªô. üî• ƒê√É S·ª¨A: B·∫Øt
     * IOException t·∫°i ƒë√¢y thay v√¨ n√©m l√™n.
     */
    public String sendCommand(String command) {
        if (!isConnected) {
            return "ERROR_CONNECTION";
        }
        try {
            // G·ª≠i l·ªánh d·∫°ng chu·ªói
            dos.writeUTF(command);
            dos.flush();

            // ƒê·ªçc ph·∫£n h·ªìi t·ª´ Server
            return dis.readUTF();
        } catch (IOException e) {
            System.err.println("L·ªói I/O khi g·ª≠i l·ªánh (" + command + "): " + e.getMessage());
            return "ERROR_IO_COMMAND";
        }
    }

    /**
     * G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t quy·ªÅn chia s·∫ª cho m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ.
     *
     * * @param fileId ID c·ªßa file s·ªü h·ªØu
     * @param targetUsername Username ng∆∞·ªùi nh·∫≠n c·∫ßn thay ƒë·ªïi quy·ªÅn
     * @param newPermissionLevel M·ª©c quy·ªÅn m·ªõi (1: Read-Only, 2: Read-Write,...)
     * @return Chu·ªói ph·∫£n h·ªìi t·ª´ Server (v√≠ d·ª•: "UPDATE_SUCCESS",
     * "UPDATE_FAIL_AUTH",...)
     */
    public String changeSharePermission(int fileId, String targetUsername, int newPermissionLevel) {
        if (currentUserId == -1) {
            return "ERROR_NOT_LOGGED_IN";
        }

        // ƒê·ªãnh d·∫°ng l·ªánh: CHANGE_PERM:[FileID]|[TargetUsername]|[NewPermissionLevel]
        String command = "CHANGE_PERM:" + fileId + "|" + targetUsername + "|" + newPermissionLevel;

        // S·ª≠ d·ª•ng h√†m sendCommand ƒë√£ c√≥ ƒë·ªÉ g·ª≠i l·ªánh v√† nh·∫≠n ph·∫£n h·ªìi
        String response = sendCommand(command);

        // Ch·ªâ log l·ªói I/O n·∫øu sendCommand tr·∫£ v·ªÅ l·ªói I/O chung
        if (response.equals("ERROR_IO_COMMAND") || response.equals("ERROR_CONNECTION")) {
            System.err.println("L·ªói khi g·ªçi changeSharePermission. M√£ l·ªói: " + response);
        }

        return response;
    }

    public boolean isClientConnected() {
        return isConnected;
    }

    public int getCurrentUserId() {
        return currentUserId;
    }
}
