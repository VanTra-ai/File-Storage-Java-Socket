/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package filestorageserver;

import filestorageserver.MyConnection;
import filestorageserver.model.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.mindrot.jbcrypt.BCrypt;

public class UserDAO {

    // Ph∆∞∆°ng th·ª©c ti·ªán √≠ch ƒë·ªÉ l·∫•y k·∫øt n·ªëi
    private Connection getConnection() {
        // T·∫°o ƒë·ªëi t∆∞·ª£ng MyConnection m·ªõi ƒë·ªÉ l·∫•y k·∫øt n·ªëi
        return new MyConnection().getConnection();
    }

    // 1. CH·ª®C NƒÇNG ƒêƒÇNG K√ù (REGISTER)
    /**
     * Th·ª±c hi·ªán ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi.
     *
     * @param username T√™n ƒëƒÉng nh·∫≠p.
     * @param password M·∫≠t kh·∫©u th√¥ (plain text).
     * @param email Email ng∆∞·ªùi d√πng.
     * @return M√£ tr·∫°ng th√°i ƒëƒÉng k√Ω.
     */
    public String registerUser(String username, String password, String email) {

        // 1. KI·ªÇM TRA T√äN ƒêƒÇNG NH·∫¨P (USERNAME)
        if (usernameExists(username)) {
            System.err.println("ƒêƒÉng k√Ω th·∫•t b·∫°i: T√™n ƒëƒÉng nh·∫≠p " + username + " ƒë√£ t·ªìn t·∫°i.");
            return "REGISTER_FAIL_USERNAME_EXIST"; // M√£ l·ªói chi ti·∫øt
        }

        // 2. KI·ªÇM TRA EMAIL ƒê√É T·ªíN T·∫†I
        if (emailExists(email)) {
            System.err.println("ƒêƒÉng k√Ω th·∫•t b·∫°i: Email " + email + " ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
            return "REGISTER_FAIL_EMAIL_EXIST"; // M√£ l·ªói chi ti·∫øt
        }

        // 3. T·∫†O HASH PASSWORD V√Ä SALT (BCrypt t·ª± nh√∫ng salt v√†o hash)
        // üî• GI·∫¢ ƒê·ªäNH CSDL CH·ªà C√ì C·ªòT password_hash (KH√îNG C·ªòT salt RI√äNG) üî•
        String sql = "INSERT INTO users (username, password_hash, email) VALUES (?, ?, ?)";

        try {
            // BCrypt.gensalt() t·∫°o ra salt ng·∫´u nhi√™n
            // BCrypt.hashpw() t·∫°o ra chu·ªói hash ho√†n ch·ªânh bao g·ªìm cost, salt v√† hash
            String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());

            // 4. K·∫æT N·ªêI V√Ä TH·ª∞C THI
            // S·ª≠a l·∫°i c√°ch s·ª≠ d·ª•ng try-with-resources ƒë·ªÉ con v√† ps ƒë∆∞·ª£c ƒë√≥ng ƒë√∫ng c√°ch
            try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {

                // C·∫ßn ki·ªÉm tra con == null ngay l·∫≠p t·ª©c sau khi g·ªçi getConnection()
                if (con == null) {
                    System.err.println("Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL khi th·ª±c hi·ªán ƒëƒÉng k√Ω.");
                    return "REGISTER_FAIL_DB_ERROR"; // L·ªói k·∫øt n·ªëi
                }

                ps.setString(1, username);
                ps.setString(2, hashedPassword);
                ps.setString(3, email);

                int affectedRows = ps.executeUpdate();

                if (affectedRows > 0) {
                    return "REGISTER_SUCCESS"; // Th√†nh c√¥ng
                } else {
                    return "REGISTER_FAIL_DB_ERROR"; // Th·∫•t b·∫°i (kh√¥ng c√≥ h√†ng n√†o b·ªã ·∫£nh h∆∞·ªüng)
                }
            }

        } catch (SQLException e) {
            System.err.println("L·ªói CSDL khi ƒëƒÉng k√Ω: " + e.getMessage());
            // L·ªói CSDL th∆∞·ªùng do r√†ng bu·ªôc UNIQUE (n·∫øu kh√¥ng ki·ªÉm tra tr∆∞·ªõc) ho·∫∑c c·∫•u tr√∫c b·∫£ng
            e.printStackTrace();
            return "REGISTER_FAIL_DB_ERROR";
        } catch (Exception e) {
            System.err.println("L·ªói khi bƒÉm m·∫≠t kh·∫©u ho·∫∑c l·ªói n·ªôi b·ªô kh√°c: " + e.getMessage());
            e.printStackTrace();
            return "REGISTER_FAIL_INTERNAL_ERROR"; // M√£ l·ªói m·ªõi cho l·ªói kh√¥ng li√™n quan ƒë·∫øn CSDL/t·ªìn t·∫°i
        }
    }

    // 2. CH·ª®C NƒÇNG ƒêƒÇNG NH·∫¨P (LOGIN)
    /**
     * X√°c th·ª±c ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng User.
     *
     * @param username T√™n ƒëƒÉng nh·∫≠p.
     * @param password M·∫≠t kh·∫©u th√¥ (plain text).
     * @return ƒê·ªëi t∆∞·ª£ng User n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng, null n·∫øu th·∫•t b·∫°i.
     */
    public User login(String username, String password) {
        // Kh√¥ng c·∫ßn truy v·∫•n c·ªôt 'salt' v√¨ n√≥ n·∫±m trong 'password_hash'
        String sql = "SELECT user_id, password_hash, email, created_at, last_login, is_active FROM Users WHERE username = ?";

        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            if (con == null) {
                return null;
            }

            ps.setString(1, username);

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String storedHash = rs.getString("password_hash");

                    // X√ÅC MINH M·∫¨T KH·∫®U B·∫∞NG BCrypt (ƒê√öNG B·∫¢O M·∫¨T)
                    boolean passwordMatches = BCrypt.checkpw(password, storedHash);

                    if (passwordMatches) {
                        updateLastLogin(rs.getInt("user_id"));

                        User user = new User();
                        user.setUserId(rs.getInt("user_id"));
                        user.setUsername(username);
                        user.setEmail(rs.getString("email"));
                        user.setCreatedAt(rs.getTimestamp("created_at"));
                        user.setLastLogin(rs.getTimestamp("last_login"));
                        user.setActive(rs.getBoolean("is_active"));

                        System.out.println("ƒêƒÉng nh·∫≠p th√†nh c√¥ng: " + username);
                        return user;
                    }
                }
            }
        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi ƒëƒÉng nh·∫≠p: " + ex.getMessage());
        }
        return null;
    }

    // 3. C·∫¨P NH·∫¨T (UPDATE) last_login
    /**
     * C·∫≠p nh·∫≠t th·ªùi gian ƒëƒÉng nh·∫≠p cu·ªëi c√πng.
     *
     * @param userId ID ng∆∞·ªùi d√πng.
     */
    private void updateLastLogin(int userId) {
        // S·ª≠ d·ª•ng NOW() ho·∫∑c CURRENT_TIMESTAMP() ƒë·ªÉ Database t·ª± ƒëi·ªÅn th·ªùi gian hi·ªán t·∫°i
        String sql = "UPDATE users SET last_login = NOW() WHERE user_id = ?";

        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {

            if (con == null) {
                System.err.println("Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL ƒë·ªÉ c·∫≠p nh·∫≠t last_login.");
                return;
            }

            ps.setInt(1, userId);
            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                // System.out.println("C·∫≠p nh·∫≠t last_login th√†nh c√¥ng cho User ID: " + userId);
            } else {
                System.err.println("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t last_login: " + userId);
            }

        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi c·∫≠p nh·∫≠t last_login: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    // 4. GET USER BY ID
    /**
     * L·∫•y th√¥ng tin ng∆∞·ªùi d√πng d·ª±a tr√™n ID.
     *
     * @param userId ID ng∆∞·ªùi d√πng.
     * @return ƒê·ªëi t∆∞·ª£ng User n·∫øu t√¨m th·∫•y, null n·∫øu kh√¥ng.
     */
    public User getUserById(int userId) {
        String sql = "SELECT user_id, username, email, created_at, last_login, is_active FROM Users WHERE user_id = ?";

        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            if (con == null) {
                return null;
            }

            ps.setInt(1, userId);

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng User (kh√¥ng c·∫ßn password hash)
                    User user = new User();
                    user.setUserId(rs.getInt("user_id"));
                    user.setUsername(rs.getString("username"));
                    user.setEmail(rs.getString("email"));
                    user.setCreatedAt(rs.getTimestamp("created_at"));
                    user.setLastLogin(rs.getTimestamp("last_login"));
                    user.setActive(rs.getBoolean("is_active"));
                    return user;
                }
            }
        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi l·∫•y user theo ID: " + ex.getMessage());
        }
        return null;
    }

    // 5. KI·ªÇM TRA T√çNH DUY NH·∫§T (Check Existence)
    /**
     * Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a (h·ªØu √≠ch cho ƒëƒÉng k√Ω).
     *
     * @param username T√™n ƒëƒÉng nh·∫≠p.
     * @return true n·∫øu username ƒë√£ t·ªìn t·∫°i, false n·∫øu ch∆∞a.
     */
    public boolean usernameExists(String username) {
        String sql = "SELECT COUNT(*) FROM Users WHERE username = ?";
        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            if (con == null) {
                return false;
            }

            ps.setString(1, username);

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    // N·∫øu count > 0, nghƒ©a l√† username ƒë√£ t·ªìn t·∫°i
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi ki·ªÉm tra username: " + ex.getMessage());
        }
        return false;
    }

    // 6. ƒê·ªîI M·∫¨T KH·∫®U
    /**
     * Thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng.
     *
     * @param userId ID ng∆∞·ªùi d√πng.
     * @param newPassword M·∫≠t kh·∫©u m·ªõi (plain text).
     * @return true n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng.
     */
    public boolean updatePassword(int userId, String newPassword) {
        // T·∫†O HASH M·∫¨T KH·∫®U M·ªöI
        String newHashedPassword = BCrypt.hashpw(newPassword, BCrypt.gensalt());

        String sql = "UPDATE Users SET password_hash = ? WHERE user_id = ?";

        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            if (con == null) {
                return false;
            }

            ps.setString(1, newHashedPassword);
            ps.setInt(2, userId);

            int affectedRows = ps.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi ƒë·ªïi m·∫≠t kh·∫©u: " + ex.getMessage());
        }
        return false;
    }

    // 7. C·∫¨P NH·∫¨T EMAIL
    /**
     * C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi d√πng.
     *
     * @param userId ID ng∆∞·ªùi d√πng.
     * @param newEmail Email m·ªõi.
     * @return true n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng.
     */
    public boolean updateEmail(int userId, String newEmail) {
        String sql = "UPDATE Users SET email = ? WHERE user_id = ?";

        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            if (con == null) {
                return false;
            }

            ps.setString(1, newEmail);
            ps.setInt(2, userId);

            int affectedRows = ps.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi c·∫≠p nh·∫≠t email: " + ex.getMessage());
            // X·ª≠ l√Ω l·ªói tr√πng UNIQUE (email)
            if (ex.getErrorCode() == 1062) {
                System.err.println("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c.");
            }
        }
        return false;
    }

    // 8. X√ìA T√ÄI KHO·∫¢N
    /**
     * X√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng v√† t·∫•t c·∫£ metadata file li√™n quan. L∆ØU √ù: Ph·∫£i
     * x√≥a file v·∫≠t l√Ω tr√™n Server b·∫±ng code Java tr∆∞·ªõc khi g·ªçi ph∆∞∆°ng th·ª©c n√†y!
     *
     * @param userId ID ng∆∞·ªùi d√πng c·∫ßn x√≥a.
     * @return true n·∫øu x√≥a th√†nh c√¥ng.
     */
    public boolean deleteUser(int userId) {
        // C·∫ßn ƒë·∫£m b·∫£o file v·∫≠t l√Ω ƒë√£ b·ªã x√≥a kh·ªèi server tr∆∞·ªõc b∆∞·ªõc n√†y!
        // ... (Logic x√≥a file v·∫≠t l√Ω)

        String sql = "DELETE FROM Users WHERE user_id = ?";

        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            if (con == null) {
                return false;
            }

            ps.setInt(1, userId);

            int affectedRows = ps.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi x√≥a ng∆∞·ªùi d√πng: " + ex.getMessage());
        }
        return false;
    }

    /**
     * Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a (h·ªØu √≠ch cho ƒëƒÉng k√Ω).
     *
     * @param email ƒê·ªãa ch·ªâ email.
     * @return true n·∫øu email ƒë√£ t·ªìn t·∫°i, false n·∫øu ch∆∞a.
     */
    public boolean emailExists(String email) {
        String sql = "SELECT COUNT(*) FROM Users WHERE email = ?";
        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            if (con == null) {
                return false;
            }

            ps.setString(1, email);

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException ex) {
            System.err.println("L·ªói CSDL khi ki·ªÉm tra email: " + ex.getMessage());
        }
        return false;
    }

    /**
     * T√¨m ki·∫øm User ID d·ª±a tr√™n T√™n ƒëƒÉng nh·∫≠p.
     *
     * @return userId n·∫øu t√¨m th·∫•y, -1 n·∫øu kh√¥ng t√¨m th·∫•y.
     */
    public int getUserIdByUsername(String username) {
        // Ki·ªÉm tra trong b·∫£ng users
        String sql = "SELECT user_id FROM users WHERE username = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("user_id");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1; // Tr·∫£ v·ªÅ -1 n·∫øu kh√¥ng t√¨m th·∫•y
    }
}
